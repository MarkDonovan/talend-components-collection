<%@ jet 
imports="
org.talend.core.model.process.INode
org.talend.core.model.process.ElementParameterParser
org.talend.core.model.metadata.IMetadataColumn 
org.talend.core.model.process.IConnection
org.talend.designer.codegen.config.CodeGeneratorArgument
org.talend.core.model.utils.NodeUtil
java.util.ArrayList
java.util.Map
java.util.List
java.util.HashMap
" 
%>
<%

		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();

    	/********************
    	 * DEFINES          *
     	 ********************/

     	List<IConnection> outMainConns = new ArrayList<IConnection>(); // outgoing main connections
     	List<IConnection> outJsonConns = new ArrayList<IConnection>(); // outgoing json connections

     	List<IMetadataColumn> outMainColumns = null;

		// Parameters
		String logical = ElementParameterParser.getValue(node,"__LOGICAL_OP__");
		boolean use_advanced = ("true").equals(ElementParameterParser.getValue(node, "__USE_ADVANCED__"));
		String advanced_condition = ElementParameterParser.getValue(node, "__ADVANCED_COND__");
		
		@SuppressWarnings("unchecked")    
		List<Map<String, String>> conditions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,  "__CONDITIONS__");
		
		@SuppressWarnings("unchecked")
		List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,  "__MAPPING__");
		
		String oauth_connection = ElementParameterParser.getValue(node, "__OAUTH_CONNECTION__"); 

		// Advanced parameters
		String attitude = ElementParameterParser.getValue(node,"__FILTER_ATTITUDE__");
		String since = ElementParameterParser.getValue(node,"__SINCE__");
		String until = ElementParameterParser.getValue(node,"__UNTIL__");
		String since_id = ElementParameterParser.getValue(node,"__SINCE_ID__");
		String max_id = ElementParameterParser.getValue(node,"__MAX_ID__");
		String language = ElementParameterParser.getValue(node,"__LANGUAGE__");
		String result_type = ElementParameterParser.getValue(node,"__RESULT_TYPE__");
		String entitySeparator = ElementParameterParser.getValue(node,"__ENTITY_SEPARATOR__");
		boolean entityPrefix = ("true").equals(ElementParameterParser.getValue(node, "__ENTITY_PREFIX__"));
		

		Integer limit = Integer.parseInt(ElementParameterParser.getValue(node,"__LIMIT__").equals("") ? "1000" : ElementParameterParser.getValue(node,"__LIMIT__"));
		Integer rpp = 200;

		boolean filter_links = ("true").equals(ElementParameterParser.getValue(node, "__FILTER_LINKS__"));
		boolean filter_questions = ("true").equals(ElementParameterParser.getValue(node, "__FILTER_QUESTIONS__"));

		// Log parameters
		boolean send_to_logcatcher = ("true").equals(ElementParameterParser.getValue(node, "__SEND_TO_LOGCATCHER__"));

		boolean hasJsonConnections = (node.getOutgoingConnections("JSON").size() != 0);
		
		// Decoding outgoing connections
		for(IConnection conn: node.getOutgoingConnections("JSON")){
    		if(!conn.isActivate()) continue;
    		IConnection cc = NodeUtil.getRealConnectionTypeBased(conn);
    		outJsonConns.add(cc);
    	}
		
    	for(IConnection conn: node.getOutgoingConnections("STANDARD")){
    		if(!conn.isActivate()) continue;
    		IConnection cc = NodeUtil.getRealConnectionTypeBased(conn);
    		outMainConns.add(cc);
    	}

%>
		/**
		 * Talend Bridge Logger
		 * @see http://gabrielebaldassarre.com
		 */
		
		class TalendTwitterLogger_<%=cid%> implements java.util.Observer{

			   public void update(java.util.Observable obs, Object obj)
			   {
			   <% if(send_to_logcatcher == true) {
						if (node.getProcess().getNodesOfType("tLogCatcher").size() > 0) {
							@SuppressWarnings("unchecked")
							List<INode> logCatchers = (List<INode>)node.getProcess().getNodesOfType("tLogCatcher");
							for (INode logCatcher : logCatchers) {
								if (("true").equals(ElementParameterParser.getValue(logCatcher, "__CATCH_TWARN__"))) { %>
									<%=logCatcher.getUniqueName() %>.addMessage("tWarn", "<%=cid %>", 4, ((org.gabrielebaldassarre.twitter.tweet.TwitterLogger)obj).getMessage(), 210);
									<%=logCatcher.getDesignSubjobStartNode().getUniqueName() %>Process(globalMap);
								<%
								}
							}
						}
		 			} %>
			   	resumeUtil.addLog(((org.gabrielebaldassarre.twitter.tweet.TwitterLogger)obj).getCategory(), "NODE:<%=cid %>", "", ((org.gabrielebaldassarre.twitter.tweet.TwitterLogger)obj).getThreadId() + "", ((org.gabrielebaldassarre.twitter.tweet.TwitterLogger)obj).getSeverity(),"",((org.gabrielebaldassarre.twitter.tweet.TwitterLogger)obj).getMessage(),"", "");
				   System.err.println(((org.gabrielebaldassarre.twitter.tweet.TwitterLogger)obj).getMessage());
			   }
			
		}
		
		TalendTwitterLogger_<%=cid%> twitterLogger_<%=cid%> = new TalendTwitterLogger_<%=cid%>();

int nb_line_<%=cid%> = 0;
 
org.gabrielebaldassarre.twitter.commodities.querybuilder.TwitterQueryBuilder s_<%= cid %> = new org.gabrielebaldassarre.twitter.commodities.querybuilder.TwitterQueryBuilder();
s_<%=cid%>
<% if(use_advanced == false){ %>
	.logicalOperator(org.gabrielebaldassarre.twitter.commodities.querybuilder.TwitterQueryBuilderLogicalOperator.<%=logical%>)
	<%
	for(Map<String, String> data : conditions){
		stringBuffer.append(".condition(" + data.get("QUERY") + ", org.gabrielebaldassarre.twitter.commodities.querybuilder.TwitterQueryBuilderOperator." + data.get("OPERATOR") + ")");
 		stringBuffer.append(NL);
	}
%>
	.attitude(org.gabrielebaldassarre.twitter.commodities.querybuilder.TwitterQueryBuilderAttitude.<%=attitude%>)
	.filterLinks(<%=filter_links%>)
	.filterQuestions(<%=filter_questions%>)
<% } else { %>
	.advancedQuery(<%=advanced_condition%>)
<% } %>
	<% if(!"MIXED".equals(result_type)){ %>.resultType(org.gabrielebaldassarre.twitter.commodities.querybuilder.TwitterQueryBuilderResultTypes.<%=result_type%>) <% } %>
	<% if(language.length() > 0) { %>.lang(<%=language%>)<% } %>
	<% if(max_id.length() > 0) { %>.maxId(<%=max_id%>)<% } %>
	<% if(since.length() > 0) { %>.since(<%=since%>)<% } %>
	<% if(since_id.length() > 0) { %>.sinceId(<%=since_id%>)<% } %>
	<% if(until.length() > 0) { %>.until(<%=until%>)<% } %>
		;

		/**
		 * TOS-bridge data structures
		 * @see http://gabrielebaldassarre.com
		 */
		 
		// data model initialization      
		org.gabrielebaldassarre.tcomponent.bridge.TalendFlowController tcontroller_<%=cid%> = org.gabrielebaldassarre.tcomponent.bridge.TalendFlowController.getInstance();
		org.gabrielebaldassarre.tcomponent.bridge.TalendFlowModel tmodel_<%=cid%> = tcontroller_<%=cid%>.getModel(new org.gabrielebaldassarre.tcomponent.bridge.TalendContext(globalMap));

		// flows factory interface
		org.gabrielebaldassarre.tcomponent.bridge.TalendFlowFactory tablefactory_<%=cid%> = tmodel_<%=cid%>.getFlowFactory();
		        
		// init needed data flows
		org.gabrielebaldassarre.tcomponent.bridge.TalendFlow queryResults_<%=cid%> = tablefactory_<%=cid%>.newFlow("Twitter Query Results", 0, false);
		org.gabrielebaldassarre.tcomponent.bridge.TalendFlow tweets_<%=cid%> = tablefactory_<%=cid%>.newFlow("Tweets", <%=2*rpp%>, false);
      		
		// Prepare columns for tweets details data flow
<%
if(outMainConns.size() > 0 || hasJsonConnections == true) stringBuffer.append(NL + "tweets_" + cid + NL); 
 if(outMainConns.size() > 0){
 
	IConnection conn = outMainConns.get(0);
	
	outMainColumns = conn.getMetadataTable().getListColumns();  
  	Map<String,IMetadataColumn> columnsMap = new HashMap<String,IMetadataColumn>();
  	for (IMetadataColumn col : outMainColumns) columnsMap.put(col.getLabel(),col);

	for(Map<String, String> data : mapping){
		String schemaColumn = data.get("SCHEMA_COLUMN"); 
		String type = columnsMap.get(schemaColumn).getTalendType();

		stringBuffer.append(".addColumn(\"" + schemaColumn +"\", org.gabrielebaldassarre.tcomponent.bridge.TalendType.getInstanceFromTalendId(\"" + type + "\"))" + NL);
	}
}
if(hasJsonConnections == true) stringBuffer.append(".addColumn(\"jsonString\", org.gabrielebaldassarre.tcomponent.bridge.TalendType.getInstanceFromTalendId(\"id_String\"))" + NL);
if(outMainConns.size() > 0 || hasJsonConnections == true) stringBuffer.append(";" + NL);	
%>
		// Prepare visitors
		org.gabrielebaldassarre.twitter.tweet.TalendFlowQueryResultBehaviour qrCrawl_<%=cid%> = new org.gabrielebaldassarre.twitter.tweet.TalendFlowQueryResultBehaviour((twitter4j.Twitter)globalMap.get("twitter_<%= oauth_connection %>"), s_<%=cid%>.build(), <%=limit%>);
		org.gabrielebaldassarre.twitter.tweet.TalendFlowTweetBehaviour twCrawl_<%=cid%> = new org.gabrielebaldassarre.twitter.tweet.TalendFlowTweetBehaviour(<%=entitySeparator%>, <%=entityPrefix%>);
		
		qrCrawl_<%=cid%>.addObserver(twitterLogger_<%=cid%>);
		twCrawl_<%=cid%>.addObserver(twitterLogger_<%=cid%>);
									
	// Link tweet details column to desired data
<%
	if(outMainConns.size() > 0 || hasJsonConnections == true) stringBuffer.append(NL + "twCrawl_" + cid + NL);
	if(outMainConns.size() > 0){

	for(Map<String, String> data : mapping){
		String schemaColumn = data.get("SCHEMA_COLUMN"); 
		String operation = data.get("OPERATION"); 

		stringBuffer.append(".setColumnLink(tweets_" + cid + ".getColumn(\"" + schemaColumn + "\"), org.gabrielebaldassarre.twitter.tweet.TweetField." + operation + ")" + NL);
	}
}
 if(hasJsonConnections == true) stringBuffer.append(".setColumnLink(tweets_" + cid + ".getColumn(\"jsonString\"), org.gabrielebaldassarre.twitter.tweet.TweetField.JSON)" + NL);
if(outMainConns.size() > 0 || hasJsonConnections == true) stringBuffer.append(";" + NL);
 %>
		qrCrawl_<%=cid%>.visit(queryResults_<%=cid%>);
		
		for(org.gabrielebaldassarre.tcomponent.bridge.TalendRow page_<%=cid%> : qrCrawl_<%=cid%>){
			tweets_<%=cid%>.truncate();
			twCrawl_<%=cid%>.setInput(page_<%=cid%>.getTalendValue("statusSet"));
			twCrawl_<%=cid%>.visit(tweets_<%=cid%>);

			for(org.gabrielebaldassarre.tcomponent.bridge.TalendRow singleTweet_<%=cid%> : java.util.Arrays.asList(tweets_<%=cid%>.getRows())){						