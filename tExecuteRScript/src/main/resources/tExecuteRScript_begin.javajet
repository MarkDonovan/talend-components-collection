<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.utils.NodeUtil
		java.util.ArrayList
		java.util.Map
		java.util.List
		java.util.HashMap
    	java.lang.StringBuilder		
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();

    	/********************
    	 * DEFINES          *
     	 ********************/

     	List<IConnection> outMainConns = new ArrayList<IConnection>(); // outgoing main connections
     	
     	List<IMetadataColumn> outMainColumns = null;

		// Parameters
		String rCode = ElementParameterParser.getValue(node,"__R_CODE__");
		String clientType = ElementParameterParser.getValue(node,"__CLIENT_TYPE__");
		String args = ElementParameterParser.getValue(node,"__R_START_ARGS__");
		String rFile = ElementParameterParser.getValue(node,"__R_FILE__");
		boolean rScript = ("true").equals(ElementParameterParser.getValue(node, "__R_SCRIPT__"));
		
		// Advanced parameters
		
		@SuppressWarnings("unchecked")
		List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,  "__MAPPING__");
		String loopSymbol = ElementParameterParser.getValue(node,"__LOOP_SYMBOL__");
		
		// Log parameters
		boolean send_to_logcatcher = ("true").equals(ElementParameterParser.getValue(node, "__SEND_TO_LOGCATCHER__"));
		
		for(IConnection conn: node.getOutgoingConnections()){
    		if(!conn.isActivate()) continue;
    		IConnection cc = NodeUtil.getRealConnectionTypeBased(conn);
    		outMainConns.add(cc);
    	}		

%>
		/**
		 * Talend Bridge Logger
		 * @see http://gabrielebaldassarre.com
		 */		
		class JRILogger_<%=cid%> implements java.util.Observer{

			   public void update(java.util.Observable obs, Object obj)
			   {
			   <% if(send_to_logcatcher == true) {
						if (node.getProcess().getNodesOfType("tLogCatcher").size() > 0) {
							@SuppressWarnings("unchecked")
							List<INode> logCatchers = (List<INode>)node.getProcess().getNodesOfType("tLogCatcher");
							for (INode logCatcher : logCatchers) {
								if (("true").equals(ElementParameterParser.getValue(logCatcher, "__CATCH_TWARN__"))) { %>
								try {
									<%=logCatcher.getUniqueName() %>.addMessage("tWarn", "<%=cid %>", 4, ((org.gabrielebaldassarre.customcode.jri.tJRILogger)obj).getMessage(), 210);
									<%=logCatcher.getDesignSubjobStartNode().getUniqueName() %>Process(globalMap);
									} catch(TalendException e){
									System.err.println(e.getMessage());
									}
								<%
								}
							}
						}
		 			} %>
			   	resumeUtil.addLog(((org.gabrielebaldassarre.customcode.jri.tJRILogger)obj).getCategory(), "NODE:<%=cid %>", "", ((org.gabrielebaldassarre.customcode.jri.tJRILogger)obj).getThreadId() + "", ((org.gabrielebaldassarre.customcode.jri.tJRILogger)obj).getSeverity(),"",((org.gabrielebaldassarre.customcode.jri.tJRILogger)obj).getMessage(),"", "");
				System.err.println(((org.gabrielebaldassarre.customcode.jri.tJRILogger)obj).getMessage());
			   }
			
		}
		
		JRILogger_<%=cid%> jriLogger_<%=cid%> = new JRILogger_<%=cid%>();
		
		 org.gabrielebaldassarre.customcode.jri.tJRIBuilder setup_<%=cid%> = new org.gabrielebaldassarre.customcode.jri.tJRIBuilder();
		 setup_<%=cid%>.args(<%=args%>, " ").clientType(org.gabrielebaldassarre.customcode.jri.tJRIClientType.<%=clientType%>);
		 
		 org.gabrielebaldassarre.customcode.jri.tJRIClientFactory factory_<%=cid%> = new org.gabrielebaldassarre.customcode.jri.tJRIClientFactory(setup_<%=cid%>);
		 
		 factory_<%=cid%>.addObserver(jriLogger_<%=cid%>);
		  
		 org.gabrielebaldassarre.customcode.jri.tJRIClient client_<%=cid%> = factory_<%=cid%>.getClient();
		 
		 ((java.util.Observable) client_<%=cid%>).addObserver(jriLogger_<%=cid%>);
		 
		 int nb_line_<%=cid%> = 0;
		 		 
		 org.gabrielebaldassarre.customcode.jri.tJRIFlowBehaviour outputSymbols_<%=cid%> = client_<%=cid%>.eval(<%= rScript ? "\"source(" + rFile.replaceAll("\"", "'") + ")\"" : rCode%>);
			 
		/**
		 * TOS-bridge data structures
		 * @see http://gabrielebaldassarre.com
		 */
		 
		// data model initialization      
		org.gabrielebaldassarre.tcomponent.bridge.TalendFlowController tcontroller_<%=cid%> = org.gabrielebaldassarre.tcomponent.bridge.TalendFlowController.getInstance();
		org.gabrielebaldassarre.tcomponent.bridge.TalendFlowModel tmodel_<%=cid%> = tcontroller_<%=cid%>.getModel(new org.gabrielebaldassarre.tcomponent.bridge.TalendContext(globalMap));

		// flows factory interface
		org.gabrielebaldassarre.tcomponent.bridge.TalendFlowFactory tablefactory_<%=cid%> = tmodel_<%=cid%>.getFlowFactory();
		        
		// init needed data flows
		org.gabrielebaldassarre.tcomponent.bridge.TalendFlow symbols_<%=cid%> = tablefactory_<%=cid%>.newFlow("R Symbols", null, false);

<%

if(outMainConns.size() > 0){

		IConnection conn = outMainConns.get(0);
		outMainColumns = conn.getMetadataTable().getListColumns();  
	 
  		Map<String,IMetadataColumn> columnsMap = new HashMap<String,IMetadataColumn>();
  		for (IMetadataColumn col : outMainColumns) columnsMap.put(col.getLabel(),col);

		StringBuilder listBuilder = new StringBuilder();
		StringBuilder symbolBuilder = new StringBuilder();
		
		listBuilder.append(NL + "symbols_" + cid + NL);
		
		symbolBuilder.append(NL + "outputSymbols_" + cid + NL);
		symbolBuilder.append(".loopVariable(" + loopSymbol  + ")" + NL);

		for(Map<String, String> data : mapping){
			String schemaColumn = data.get("SCHEMA_COLUMN");
			String rSymbol = data.get("R_SYMBOL");
			String rexp = data.get("REXP"); 
			String type = columnsMap.get(schemaColumn).getTalendType();
			
			listBuilder.append(".addColumn(\"" + schemaColumn +"\", org.gabrielebaldassarre.tcomponent.bridge.TalendType.getInstanceFromTalendId(\"" + type + "\"))" + NL);
			
			symbolBuilder.append(".outputSymbol(symbols_" + cid + ".getColumn(\"" + schemaColumn + "\"), new org.gabrielebaldassarre.customcode.jri.tJRISymbol(" + rSymbol + ", org.gabrielebaldassarre.customcode.jri.tJRIOutputType." + rexp + "))" + NL);
			}
			
		listBuilder.append(";" + NL);
		
		symbolBuilder.append(";" + NL);
		
		stringBuffer.append(listBuilder.toString());
		stringBuffer.append(symbolBuilder.toString());
		
} // outmain.conn		

%>	
		outputSymbols_<%=cid%>.visit(symbols_<%=cid%>);
		
		org.gabrielebaldassarre.tcomponent.bridge.TalendRow[] symOutputStage_<%=cid%> = symbols_<%=cid%>.getRows();
		for(int i_<%=cid%>=0; i_<%=cid%> < symOutputStage_<%=cid%>.length; i_<%=cid%>++){
				
			 